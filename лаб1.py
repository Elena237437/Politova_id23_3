import tkinter as tk  # Импортируем библиотеку tkinter для работы с графическим интерфейсом
import math  # Импортируем библиотеку math для математических операций (синус и косинус)


# 1. Создание окна и окружности
def create_window():
    # global - делает переменные доступными в нескольких функциях
    global root, canvas  # Определяем глобальные переменные для окна и области рисования (canvas)
#root — главное окно программы, которое создаётся с помощью библиотеки Tkinter. Оно отображает весь графический интерфейс.
    # Создаем главное окно программы
    root = tk.Tk()  # Инициализируем главное окно
    root.title("Точка движется по окружности")  # Устанавливаем заголовок окна

    # Создаем область для рисования (canvas) размером 600x600
    canvas = tk.Canvas(root, width=600, height=600)
    canvas.pack()  # Отображаем область на экране

    # Рисуем окружность с центром в (300, 300) и радиусом 200 пикселей
    # Окружность рисуется как овал внутри квадрата, описанного от (100, 100) до (500, 500)
    canvas.create_oval(100, 100, 500, 500)



# 2. Движение точки по окружности
def move_point():
    # global - делает переменные доступными в нескольких функциях
    global angle  # Объявляем глобальную переменную угла, чтобы изменять её в процессе работы программы

    # Вычисляем новые координаты точки, которая будет двигаться по окружности
    # Центр окружности находится в точке (300, 300), а радиус равен 200
    # math.cos(angle) и math.sin(angle) возвращают значение косинуса и синуса угла, что даёт направление
    x = 300 + 200 * math.cos(angle)  # Координата X новой позиции точки
    y = 300 + 200 * math.sin(angle)  # Координата Y новой позиции точки

    # Перемещаем точку в новые координаты
    # Мы используем метод canvas.coords, который изменяет координаты объекта на экране
    # Точка рисуется как маленький круг с центром в (x, y) и радиусом 5 пикселей (поэтому x-5, y-5, x+5, y+5)
    canvas.coords(point, x - 5, y - 5, x + 5, y + 5)

    # Увеличиваем угол, чтобы точка двигалась по окружности
    # direction управляет направлением (1 - по часовой стрелке, -1 - против)
    angle += speed * direction  # Увеличиваем угол на значение скорости с учётом направления

    # Через 50 миллисекунд снова вызываем функцию move_point для обновления положения точки
    root.after(50, move_point)
#angle — переменная, которая хранит текущий угол, под которым находится точка относительно центра окружности. Это ключевая переменная для расчёта координат точки на окружности.

# 3. Функции для изменения скорости и направления
def increase_speed(event): #event- объект содержит инф о соб(далее мы будем использлвать нажатие на клавишу и обращаться к этим функциям)
    # global - делает переменные доступными в нескольких функциях
    global speed  # Объявляем глобальную переменную скорости, чтобы можно было её изменять
    speed += 0.01  # Увеличиваем скорость движения точки на 0.01
    # Теперь точка будет двигаться быстрее


def decrease_speed(event):
    # global - делает переменные доступными в нескольких функциях
    global speed  # Объявляем глобальную переменную скорости
    # Уменьшаем скорость движения точки, но не позволяем скорости быть меньше 0.01, чтобы точка не остановилась
    speed = max(0.01, speed - 0.01)


def reverse_direction(event):
    # global - делает переменные доступными в нескольких функциях
    global direction  # Объявляем глобальную переменную направления
    direction *= -1  # Меняем направление движения на противоположное (если 1, станет -1, и наоборот)


# Главная часть программы
# 1. Создаём окно и рисуем окружность
create_window()  # Вызываем функцию для создания окна и рисования окружности

# 2. Рисуем точку, которая будет двигаться по окружности
# Начальная точка рисуется на окружности в положении (495, 295), с радиусом 5 пикселей
point = canvas.create_oval(495, 295, 505, 305, fill="red")  # Точка красного цвета

# 3. Устанавливаем начальные параметры для движения точки
angle = 0  # Угол, с которого начинается движение (в радианах)
speed = 0.05  # Скорость движения точки (чем больше значение, тем быстрее)
direction = 1  # Направление движения (1 — по часовой стрелке, -1 — против часовой)

# 2. Запускаем функцию движения точки
move_point()  # Запускаем анимацию точки по окружности

# 3. Привязываем клавиши для изменения скорости и направления движения
# Используем метод bind для связывания нажатий клавиш с функциями
root.bind("<Up>", increase_speed)  # Нажатие клавиши "Вверх" увеличивает скорость движения
root.bind("<Down>", decrease_speed)  # Нажатие клавиши "Вниз" уменьшает скорость движения
root.bind("<Left>", reverse_direction)  # Нажатие клавиши "Влево" меняет направление движения

# Запускаем главный цикл программы (обработка событий и обновление интерфейса)
root.mainloop()  # Без этого цикл событий не запустится, и окно закроется сразу
